# Economy Scheduler Service Container
# CPU-only container for orchestration logic

FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git make gcc musl-dev

WORKDIR /build

# Copy go mod files
COPY services/scheduler/go.mod services/scheduler/go.sum ./
RUN go mod download

# Copy source code
COPY services/scheduler/ ./
COPY pkg/ /build/pkg/

# Build the scheduler binary
RUN CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -o scheduler ./cmd/scheduler

# Runtime stage
FROM alpine:3.18

RUN apk --no-cache add ca-certificates tzdata

WORKDIR /app

# Copy binary from builder
COPY --from=builder /build/scheduler /app/scheduler

# Create non-root user
RUN addgroup -g 1000 worldshare && \
    adduser -D -u 1000 -G worldshare worldshare

# Set ownership
RUN chown -R worldshare:worldshare /app

USER worldshare

# Expose ports
EXPOSE 8080 9090

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

ENTRYPOINT ["/app/scheduler"]